<% content_for :title, " Rozdział I: Typy podstawowe i złożone. Omówienie typów zmiennych oraz ich zastosowanie " %>

<div id="staticContent">


<h1 class="chapter">
    Rozdział I: Typy podstawowe i złożone. Omówienie typów zmiennych oraz ich zastosowanie
</h1>
<p>
    /Barbara Halska/
</p>
<p>
    Zacznijmy od początku, a więc od sposobu zapisywania danych. Tak jak Wy macie potrzebę zapisania jakichś wartości na kartce, w notatniku czy w telefonie,
    tak samo dzieje się z danymi w programie. Dane te przypisujemy do zmiennych, które to właśnie służą do przechowywania wartości.
</p>
<h2 class = "title">
    I.1. Zmienne
</h2>
<p>
    Zmienna to miejsce zarezerwowane w pamięci, w którym zapisana jest jakaś dana, z której korzysta napisany program. Można przetwarzać tą zmienną,
    przechowywać w niej dane tymczasowe, wykonywać na niej funkcje.
</p>
<p>
    Pamięć komputera możemy porównać z koszykiem na zakupy, do którego wkładamy produkty. Każdy produkt ma nazwę oraz kolor, smak czy rozmiar. Tak więc w
    naszym
</p>
<p>
    koszyku możemy znaleźć nabiał, który raz jest mlekiem, raz jogurtem, a raz serkiem homogenizowanym, ale to zawsze będzie nabiał.
</p>
<h3 class ="example">
    Przykład:
</h3>
 <code class=" hljs livecodeserver language-csharp">
    owoce = "jabłko" //ta instrukcja deklaruje zmienną o nazwie owoce i zapisuje w niej łańcuch znaków
    nabiał = "ser"
    pieczywo = "bułka"
</code>
<img src="http://media30.pl/wp-content/uploads/2015/12/Koszyk.png">

<h3 class ="subtitle">
    I.1.1 Typy zmiennych
</h3>
<p>
    Każda zmienna może przechowywać określony rodzaj informacji. Informacją może być liczba (dowolnego rodzaju – naturalna, całkowita, zmiennoprzecinkowa,
    stałoprzecinkowa), znaki. Rodzaj informacji zwany jest typem.
</p>
<p>
    Rodzaje zmiennych:
</p>
<ul>
    <li>  całkowite (int) - przechowują liczby całkowite np.: 1,10,1000;</li>
    <li> zmiennoprzecinkowe (float) - przechowuje liczby ułamkowe np.: 1,00001;</li>
    <li>  zmiennoprzecinkowe (double) - przechowuje liczby ułamkowe o podwojonej precyzji</li>
    <li> logiczne (bool) - przechowują wartość true lub false;</li>
    <li>znakowe (char, string) - przechowują dowolne znaki np.: "1","r","@";</li>
</ul>
<p>
    Pamiętajmy, że deklarując zmienną rezerwujemy dla niej miejsce w pamięci; to, ile tego miejsca potrzebujemy uzależnione jest od jej typu.
</p>
<p>
    Deklaracja zmiennej wiąże się od razu z rezerwacją miejsca w pamięci operacyjnej, bo to właśnie tam będą przechowywane wartości. Pamięć możemy porównać do
    szafy z szufladami, z których każda ma swój numer, a to jakie w niej będą przechowywane elementy zależy od właściciela szuflady, a więc zmiennej, która
    zostanie do niej przypisana.
</p>
<p>
    Wizualizacja pamięci operacyjnej, w której zmienne otrzymują miejsce na przechowywanie wartości
</p>
 <table>
<tbody>
<tr>
<td>ile_galek</td>
<td>owoce</td>
<td>nr</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>kod</td>
<td>imie</td>
<td>pieczywo</td>
<td>ulica</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>miaso</td>
<td>nabiał</td>
<td>nazwisko</td>
<td>&nbsp;</td>
<td>Sma_lodow</td>
</tr>
</tbody>
</table>
<h3 class="subtitle">
    I.1.2 Deklaracja zmiennej
</h2>
<p>
    Zanim skorzystamy ze zmiennej musimy ją zadeklarować, nadać jej nazwę. Bardzo dobrym rozwiązaniem jest stosowanie nazw tak, aby od razu było wiadomo, jakie
    wartości będą w niej przechowywane np.: "nr_domu" - taka zmienna będzie przechowywać liczbę. Nie możemy też stosować polskich znaków, ale w nazwie mogą
    pojawić się również cyfry. Kompilatory rozróżniają duże i małe litery dlatego zmienna <b>„ABC”</b> jest inną zmienną niż zmienna <b>„abc”</b>, musimy pamiętać o tym
    odwołując się do nich. No i jeszcze jedna sprawa - nie wolno tworzyć nazw zmiennych z wykorzystaniem słów kluczowych. Każdy język ma własną listę, ale jest
    kilka, które są uniwersalne i spotykamy je w każdym: break, case, class, do, else, if, false, for, public, private, protected, switch, true, while.
</p>
<p>
    Kompilator to program, który rozumie instrukcje napisane w danym języku. Kompilacja przekształca kod źródłowy i powoduje wygenerowanie jego wydajnej,
    maszynowej reprezentacji, która zazwyczaj jest zoptymalizowana pod kątem wydajności działania. Wśród języków programowania są też języki skryptowe, które z
    natury są językami interpretowanymi, co oznacza, że przeglądarka może wykonać każdą instrukcję w kodzie.
</p>

<img src="http://media30.pl/wp-content/uploads/2015/12/Deklaracja.png">
<h3 class="subtitle">
    I.1.3 Instrukcja przypisania
</h2>
<p>
    Deklarując zmienną możemy od razu przypisać jej wartości, ale możemy też to zrobić później. Do przypisania konkretnej wartości wykorzystujemy operatory
    przypisania <b> np.: znak = </b>
</p>
<h3 class ="example">
    Poniżej przedstawiamy kilka przykładów deklaracji zmiennych:
</h3>
 <code class=" hljs livecodeserver language-csharp">
    Smak_lodow = „truskawkowe” //ta instrukcja deklaruje zmienną o nazwie smak_lodow i zapisuje w niej łańcuch znaków w tym przypadku „truskawkowe”
    Ile_galek = 2 //z kolei ta instrukcja zapisuje wartość liczbową.
</code>
<p>
    Na pewno zauważyliście różnicę przy zapisie w zależności od tego czy wprowadzamy wartość liczbową, czy ciąg znaków. W drugim przypadku stosujemy cudzysłów.
    Tworząc zmienną nie musimy od razu przypisać jej wartości początkowej, zawsze możemy to zrobić później.
</p>
<img src="http://media30.pl/wp-content/uploads/2015/12/Pudelka.png">
<p>
    * Zmienna dostaje jakieś miejsce w pamięci a co za tym idzie, wartości, które tam już kiedyś nasz system operacyjny zapisał, więc dla bezpieczeństwa można
    ją wyzerować np. nr = 0
</p>
<h2 class = "title">
    I.2. Tablice
</h2>
<p>
    Ostatnio padła wygrana w totolotka w wysokości 35 milionów, każdy chciałby taką nagrodę wygrać, udało się to jednej osobie. Szczęśliwiec wytypował 6 cyfr z
    przedziału od 1 do 60. Te wylosowane cyfry możemy zapisać: 1,14,23,31,33,35. Gdybyśmy chcieli zapisać je w programie, musielibyśmy użyć 6 zmiennych np.
    lotto1 = 1, lotto2 = 14 itd. Do tego typu zapisu przy użyciu jednej zmiennej stosujemy tablice. Tablica (ang. array) jest typem danych, który może
    przechowywać wiele wartości. W pamięci komputera tablica zajmuje ciągły obszar pamięci, a jej elementy, zwane komórkami, są umieszczone w tym obszarze
    jeden obok drugiego.
</p>
<img src="http://media30.pl/wp-content/uploads/2015/12/Tam11423.png">
<h3 class = "subtitle">
    I.2.1 Tworzenie prostej tablicy
</h3>
<p>
    Skoro tablica również jest zmienną, to trzeba nadać jej nazwę np. lotto w której będzie przechowywała wyniki losowania.
</p>
 <code class=" hljs livecodeserver language-csharp">   
 lotto = [ 1,14,23,31,33,35]; //deklaracja tablicy lotto, która przechowuje wyniki losowania
</code>
<p>
    Wszystkie wartości możemy potraktować jako jedną całość, możemy też odwoływać się do poszczególnych elementów tej tablicy.
</p>
 <code class=" hljs livecodeserver language-csharp">
    pisz(lotto[0]); //Wyświetlony zostanie pierwszy element tablicy czyli liczba 1
</code>
<p>
    Zanim przejdziemy dalej, musimy się upewnić, czy rozumiecie czym są tablice. Jak już wcześniej było to wytłumaczone, tablic używamy do przechowywania wielu
    wartości w odróżnieniu od zmiennych, które pozwalają zapisywać tylko jedną wartość, taką jak liczba czy słowo. Najczęściej tablice, będziemy stosować do
    grupowania podobnych informacji, takich jak wyniki meczów czy oceny. Zawsze wtedy, gdy będziemy chcieli zgrupować jakiś zbiór danych możemy utworzyć
    tablicę i w niej je zapisać. Gdy będzie to potrzebne, możemy odwołać się do całej tablicy lub do konkretnej komórki w celu skorzystania z danych.
</p>
<h3 class = "example">
    PRZYKŁAD
    CHCEMY STWORZYĆ TABLICĘ, KTÓRA BĘDZIE PRZECHOWYWAĆ KOLORY
</h3>
 <code class=" hljs livecodeserver language-csharp">
    COLOR = ["NIEBIESKI", "ZIELONY", "CZERWONY", "ŻÓŁTY"];
</code>
<p>
    *Czy zwróciliście uwagę, że poszczególne elementy tablicy są oddzielone przecinkami? Każdy element jest umieszczony w osobnej komórce, która ma swój
    indeks. Indeksowanie zaczyna się od zera.
</p>
<p>
    Każdy element jest umieszczony w osobnej komórce, która ma swój indeks. Numerowanie indeksów zaczyna się od zera. Jeżeli tablica tak jak w przypadku naszej
    lotto jest 6 elementowa to ostatni indeks jest mniejszy o jeden a więc ma wartość 5.
</p>
<h3 class = "example">
    PRZYKŁAD
</h3>
 <code class=" hljs livecodeserver language-csharp">
    LOTTO = [ 1,14,23,31,33,35]; //DEKLARACJA TABLICY

    PISZ(LOTTO[2]); //WYŚWIETLENIE TRZECIEGO ELEMENTU TABLICY
</code>
<img src="http://media30.pl/wp-content/uploads/2015/12/Indeks.png">


   <h3 class = "subtitle">
        I.2.2 Ciąg znaków jako tablica
    </h3>


    <p>
        Zmienne typu string mają specyficzną budowę. Mogą zostać także zapisane tak naprawdę jak ciąg pojedynczych znaków.
    </p>


     <code class=" hljs livecodeserver language-csharp">
    name = ["a","p","k","i",".","o","r","g"] lub też name = "apki.org"
    </code>


    <p>
        Jeżeli wcześniej zmienna name została zadeklarowana jako tablica to kompilator samodzielnie podzieli string na pojedyncze znaki.
    </p>


        <img alt="Obraz" src="http://media30.pl/wp-content/uploads/2015/12/Apki1.png" width="750">
    




    <h3 class = "subtitle">
        I.2.3 Tablica asocjacyjna
    </h3>


    <p>
        Są to tablice, gdzie indeksem może być znak lub string.
    </p>


    <p>
        Przykład tablicy, która zawiera numery pokoi, a w rekordach zapisane są nazwiska osób, które zarezerwowały pokój.
    </p>

    <h3 class ="example">
        Przykład
    </h3>


 <code class=" hljs livecodeserver language-csharp">
hotel[„pokój_1]” = „Marcin”
hotel[„pokój_2]” = „Kasia” 
hotel[„pokój_5]” = „Basia”
    </code>
    <h3>
        I.2.4 Tablice wielowymiarowe
    </h3>


    <p>
        Możemy też tworzyć tablice wielowymiarowe - czyli tablice w tablicach. Do czego może się to przydać? Wykorzystajmy poprzedni przykład z hotelem,
        tworząc tablicę, której kolejna kolumna będzie przechowywać informację o tym, czy osoba wykupiła śniadanie.
    </p>


    <h3 class ="example">
        Przykład
    </h3>


 <code class=" hljs livecodeserver language-csharp">
hotel[1]=[„Marcin”, „śniadanie”] 
hotel[2]=[„Kasia”, „bez śniadania”]
hotel[3]=[„Basia”, „śniadanie”]
    </code>






    <h2 class = "title">
        I.3. Podstawowe operacje na danych
    </h2>


    <p>
        Poradziliśmy sobie ze zmiennymi i przyszedł czas no wykonywanie operacji na danych, a więc przetwarzanie ich. Do tego wykorzystujemy operatory np.
        takie jak dodawanie czy porównywanie dwóch wartości.
    </p>




    <h3 class = "subtitle">
        I.3.1 Podstawowe operacje matematyczne
    </h3>




    <h3 class = "opertation">
        Dodawanie
    </h3>


    <p>
        Podstawowymi operacjami są głównie dodawanie, odejmowanie, mnożenie, dzielenie. Można w bardzo prosty sposób te operacje wykonywać, używając
        podstawowych dla każdego języka programowania znaków.
    </p>


 <code class=" hljs livecodeserver language-csharp">
liczba = 2 + 7 //po tym działaniu w stworzonej zmiennej liczba będzie przechowywana wartość 9
    </code>


    <p>
        W przeciwieństwie do matematyki, w programowaniu można przeprowadzać operacje, które w matematyce nie miałyby miejsca.
    </p>


    <p>
        Kod:
    </p>


 <code class=" hljs livecodeserver language-csharp">
liczba = liczba + 1 //po tej instrukcji w zmiennej zapisana zostanie wartość 10 (jako, że poprzednią wartością zmiennej liczba jest liczba 9
    </code>


    <p>
        nie jest operacją matematyczną, a operacją przypisania do zmiennej "liczba" wartości o jeden większej niż wartość poprzednia.
    </p>


    <p>
        Zapis można skrócić poprzez istnienie dodatkowego operatora dodawania:
    </p>


    <p>
        <b>liczba += 1</b>
    </p>


    <p>
        Zadaniem tego operatora jest dodanie do zmiennej dowolnej wartości.
    </p>


    <p>
        Analogicznie można do jednej zmiennej zapisywać przetworzoną drugą liczbę, np.:
    </p>






    <p>
        Przykład
    </p>


     <code class=" hljs livecodeserver language-csharp">
liczba1 = 5
liczba2 = liczba1 + 20
lub
liczba1 = 5
liczba2=0
liczba2+=liczba1
liczba2+=5 //Wynikiem ostatniej operacji jest zapisana w zmiennej "liczba2" wartość 25.
    </code>




    <h3 class = "operation">
        Odejmowanie
    </h3>


    <p>
        Drugim podstawowym znakiem jest znak minus, którego używa się w sposób analogiczny do poprzedniego:
    </p>


    <h3 class = "example">
        Przykład
    </h3>


     <code class=" hljs livecodeserver language-csharp">
liczba1 = 5
liczba2 = liczba1 – 20 //wynikiem będzie wartość -15.
Istnieje też możliwość wykorzystania operatora "-=":
liczba1 = 5
liczba2 += liczba1 //wynikiem będzie wartość 5.
liczba2 -= 20 //wynikiem będzie wartość -15.
    </code>




    <h3 class = "operation">
        Mnożenie
    </h3>


    <p>
        Operacja mnożenia jest reprezentowana za pomocą znaku "*". W bardzo prosty sposób można wyliczyć kwadrat danego elementu przy pomocy poniższej
        operacji:
    </p>


    <h3 class = "example">
        Przykład
    </h3>


     <code class=" hljs livecodeserver language-csharp">
liczba = 5
liczba = liczba * liczba //w zmiennej "liczba" zostanie zapisany wynik 25
    </code>




    <h3 class ="operation">
        Dzielenie
    </h3>


    <p>
        Operacja dzielenia reprezentowana jest za pomocą znaku "/". W zależności od typu danych w jakim będzie zapisywany wynik działania taka będzie zwracana
        wartość.
    </p>


    <h3 class = "example">
        Przykład
    </h3>


     <code class=" hljs livecodeserver language-csharp">
liczba = 5/10 //w przypadku gdy zmienna "liczba" jest całkowitą, wynikiem działania jest 0
liczba = 5.0/10.0 //w przypadku gdy zmienna "liczba" jest całkowitą, wynikiem działania jest 0.5
Kolejny operator związany z dzieleniem, jest zwracający resztę tej operacji. Znakiem używanym w tym wypadku jest znak "%"
liczba = 2%5 //wynikiem jest 4
    </code>






    <h3 class = "subtitle">
        I.3.2 Operatory porównania
    </h3>


    <p>
        Operatory porównania służą przede wszystkim do porównania liczby:
    </p>

<table>
<tbody>
<tr>
<td>Operator</td>
<td>Opis</td>
</tr>
<tr>
<td>&gt;</td>
<td>większe od</td>
</tr>
<tr>
<td>&gt;=</td>
<td>większe lub równe</td>
</tr>
<tr>
<td>&lt;</td>
<td>mniejsze</td>
</tr>
<tr>
<td>&lt;=</td>
<td>mniejsze lub równe</td>
</tr>
<tr>
<td>==</td>
<td>równe</td>
</tr>
<tr>
<td>!=</td>
<td>różne</td>
</tr>
</tbody>
</table>

    <p>
        Wynikiem operacji porównania jest prawda albo fałsz, czyli warunek jest spełniony albo nie.
    </p>




    <p>
        Operatorami logicznymi nazywamy wszystkie spójniki klasycznego rachunku zdań. Najczęstszymi są to i, lub oraz negacja. Będziesz ich używał/-a w
        instrukcjach warunkowych. Zwracają wartość true lub false.
    </p>




    <h3 class ="operation">
        Iloczyn logiczny
    </h3>


    <p>
        Znak operatora logicznego to "&amp;&amp;". Wszystkie wartości muszą być prawdziwe, aby została zwrócona wartość true(prawda).
    </p>

<table>
<tbody>
<tr>
<td>wejście</td>
<td>wejście</td>
<td>wyjście</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>





    <h3 class ="operation">
            Suma logiczna
    </h3>


    <p>
        Znak sumy logicznej to "||". Co najmniej jedna z wartości musi być prawdziwa, aby została zwrócona prawda.
    </p>

<table>
<tbody>
<tr>
<td>wejście</td>
<td>wejście</td>
<td>wyjście</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>





    <p>
        Wyrażeń logicznych można używać do podejmowania decyzji przy użyciu instrukcji warunkowych if. Instrukcja ta pozwala wykonywać umieszczony w niej kod,
        jedynie wtedy gdy warunek jest spełniony, a więc osiąga wartość true.
    </p>




    <h3 class = "subtitle">
        I.3.3 Instrukcja warunkowa
    </h3>


    <p>
        Instrukcje warunkowe to konstrukcje, które służą do sprawdzania, czy dany warunek został spełniony. Jest to praktycznie podstawowy element języka
        programowania. Dzięki instrukcjom warunkowym możemy odpowiednio zareagować na istniejące sytuacje i sterować pracą programu. Przykładowo: użytkownik
        musi wpisać swoje imię na samym początku działania programu. Może się jednak zdarzyć, że użytkownik specjalnie lub omyłkowo wpisze liczbę. Jeżeli
        programista nie uwzględni tej możliwości i nie wprowadzi odpowiednich zabezpieczeń, może się to skończyć źle dla programu lub (w przypadku większych
        aplikacji) spowodować błędy związane z bezpieczeństwem systemu.
    </p>




  <strong>
        
        Konstrukcja warunku
    </strong>


    <p>
        Warunek składa się z dwóch zasadniczych części – słowa kluczowego if i głównego warunku. Instrukcja ta pozwala wykonać umieszczony w niej blok kodu,
        wyłącznie w przypadku, gdy warunek przyjmie wartość true. Składnia wygląda w następujący sposób:
    </p>

<img src="">


    <p>
        Podstawowym warunkiem jest warunek porównujący, czy wartość dwóch zmiennych jest identyczna
    </p>




    <h3 class ="example">
        Przykład
    </h3>


     <code class=" hljs livecodeserver language-csharp">
if (a==b)
pisz”a = b”
    </code>




    <p>
        Należy tutaj zwrócić uwagę, że w instrukcji warunkowej korzystamy z operatorów porównania.
    </p>


    <p>
        Każdy warunek powinien zwracać wartość true lub false.
    </p>


    <p>
        W programowaniu używa się czasem także operatora negacji – który zamienia wartość logiczną na przeciwną, np.
    </p>






    <h3 class ="example">
        Przykład
    </h3>


    <p>
        !(a&gt;b) //sprawdź, czy nieprawdą jest, że a jest większe od b
    </p>


    <p>
        //operacja ta jest równoważna z !(a&lt;=b)
    </p>




    <p>
        Bardzo ważne jest też łączenie warunków ze sobą – służą do tego operatory logiczne.
    </p>


    <p>
        <img
            alt="Pole tekstowe"
            src="https://word-edit.officeapps.live.com/we/ResReader.ashx?v=00000000-0000-0000-0000-000000000014&amp;n=E2o37.img&amp;rndm=9b541dae-01c0-4ada-a534-af1dea190fd9&amp;Fi=SD7FE07B01B0918FD5!393&amp;C=5_810_BL2-SKY-WAC-WSHI&amp;ak=m%3Dpl%2Dpl&amp;usid=258fe926-2ad9-43e4-8177-08b3f019459a&amp;build=16.0.6228.3017&amp;waccluster=AM3"
        />
        A co jeżeli warunek nie został spełniony? Możemy również wykonać instrukcję, kiedy warunek nie jest spełniony - do tego służy „else".
    </p>


    <p>
        <img
            alt="Pole tekstowe"
            src="https://word-edit.officeapps.live.com/we/ResReader.ashx?v=00000000-0000-0000-0000-000000000014&amp;n=E2o40.img&amp;rndm=dd3968db-21df-4366-9fd6-3df5a878df94&amp;Fi=SD7FE07B01B0918FD5!393&amp;C=5_810_BL2-SKY-WAC-WSHI&amp;ak=m%3Dpl%2Dpl&amp;usid=258fe926-2ad9-43e4-8177-08b3f019459a&amp;build=16.0.6228.3017&amp;waccluster=AM3"
        />
        Warunki można też zagnieżdżać tzn, jeżeli instrukcja “else” nie wystarczy, a istnieje potrzeba sprawdzenia kolejnego warunku, jeżeli pierwszy nie
        został spełniony. Możemy połączyć dowolnie wiele instrukcji if/else. Za pomocą else if można dodawać dowolnie wiele warunków, przy czym każdy będzie
        mieć własny blok kodu, który będzie wykonany, jeżeli warunek zostanie spełniony.
    </p>






    <h3 class = "example">
        Przykład
    </h3>

 <code class=" hljs livecodeserver language-csharp">
Sprawdź czy podana przez użytkownika liczba jest dodatnia, ujemna czy zero.  
Założenie wprowadzane liczby są całkowite
liczba = 3
if ( liczba > 0 )
pisz("Liczba jest dodatnia") //spełniony warunek - zostanie wyświetlony komunikat
else if ( liczba < 0 )
pisz ("Liczba jest ujemna ") //nie spełniony warunek - nie zostanie wyświetlony komunikat else if ( liczba == 0 )
pisz ("Liczba jest dodatnia") //nie spełniony warunek - nie zostanie wyświetlony komunikat


</code> 

    <h2 class ="title">
        I.4. Optymalizacja kodu
    </h2>


    <p>
        Projektując kod, zawsze staraj się zoptymalizować go tak, aby był jak najmniej narażony na błędy oraz nie zawierał niepotrzebnych instrukcji i tak
        przykład powyższy zostanie zoptymalizowany.
    </p>


    <p>
        <img alt="Obraz" src="http://media30.pl/wp-content/uploads/2015/12/Bledy.png">
    </p>


    <h3 = "example">
        Przykład
    </h3>


     <code class=" hljs livecodeserver language-csharp">
liczba = 3
if ( liczba > 0 )
pisz("Liczba jest dodatnia") //spełniony warunek zostanie wyświetlony komunikat
else if ( liczba < 0 )
pisz ("Liczba jest ujemna ") //nie spełniony warunek nie zostanie wyświetlony komunikat
else  
pisz ("Liczba jest dodatnia") //wyświetli się tylko wtedy kiedy powyższe warunki nie zostaną spełnione
</code>




    <p>
        *Jeżeli zmienna jest jest typu logicznego to nie musi sprawdzać czy jest true, wystarczy ją tylko umieścić w warunku
    </p>




    <h3 class = "example">
        Przykład
    </h3>


     <code class=" hljs livecodeserver language-csharp">
sunny_day = true
if(sunny_day)
pisz(“Idziemy na spacer”)
else
pisze(“Zostajemy w domu”)

   </code>




    <h2 class = "title">
        I.5. Konstrukcje pętli
    </h2>


    <p>
        Jest wiele czynności, które wykonujemy więcej niż jeden raz, to może być pojedyncza instrukcja lub zbiór np. Wstajemy rano, myjemy zęby.
    </p>


    <p>
        Oczywiście, także w kodzie często musimy wykonywać czynności więcej niż jeden raz i właśnie do tego możemy wykorzystać pętle.
    </p>


    <p>
        Wcześniej zostały już omówione wyrażenia, które zwracają wartość logiczna np a&gt;0. Właśnie takie wyrażenia, mają duże znaczenie w działaniu pętli.
    </p>


    <p>
        Pętla to chyba najważniejszy składnik programowania w dowolnym języku. Umożliwia odciążenie programisty od decydowania, ile razy dana operacja ma się
        wykonać – komputer sam określa ile razy wykonuje się dana operacja.
    </p>




    <h2 class = "title">
        I.5.1 Pętla while
    </h2>


    <p>
        Działa nieco podobnie do instrukcji warunkowej, z tą różnicą, że wykonuje kod nie jednokrotnie, a wielokrotnie.
    </p>




    <p>
        <img alt="Obraz" src="http://media30.pl/wp-content/uploads/2015/12/While.png">
    </p>






    <h3 class = "example">
        Przykład
    </h3>


     <code class=" hljs livecodeserver language-csharp">
Tworzymy maszynę losującą liczby z dużego LOTTO. Jak wiemy trzeba ich wylosować aż 6 a więc będzie powtarzalność działania
Lotto = 1
while (lotto < 7) lub (lott<=6) // w obu przypadkach pętla wykona się 6 razy
{
Losowanie liczby lotto;
Lotto = lotto + 1;
}
</code>

    <p>
        *instrukcja while rozpoczyna się od słowa kluczowego while
    </p>


    <p>
        *petla while używa wyrażenia logicznego, w skrócie zwanego – warunkiem
    </p>


    <p>
        *jeżeli warunek jest spełniony, czyli przyjmuje wartość true, cała zawartość bloku kodu zostanie wykonana
    </p>


    <p>
        *co to takiego blok kodu? Jest to zbiór instrukcji, które w naszym przykładzie zostały zawarte w nawiasach klamrowych
    </p>


    <p>
        *jeżeli warunek będzie spełniony, po wykonaniu bloku kodu, wracamy na początek pętli i realizujemy go ponownie. Jeżeli natomiast warunek będzie false
        to pętla zostanie zakończona i nie wykona się instrukcja.
    </p>


    <p>
        Na początku programu tworzona jest zmienna lotto, która przyjmuje wartość 1. Następnie dodano do kodu pętlę, która sprawdza, jaka jest wartość ww.
        zmiennej. Jeżeli zmienna lotto jest mniejsza od 7 to następuje losowanie liczby oraz zwiększenie wartości zmiennej lotto. Zmienna stanu jest
        modyfikowana tylko i wyłącznie w przypadku, gdy zostało wpisane poprawne hasło. Po modyfikacji wartości zmiennej stanu na True, program przechodzi do
        końca pętli i kończy jej działanie – a także programu – dalej nie ma instrukcji.
    </p>








    <h3 class = "subtitle">
        I.5.2 Pętla do while
    </h3>


    <p>
        Ta pętla różni się od poprzedniej przede wszystkim tym, że zostanie przynajmniej raz wykonana nawet, jeżeli nie zostanie spełniony warunek.
    </p>


    
        <img src="http://media30.pl/wp-content/uploads/2015/12/DoWhile.png">    




    <p>
        W przypadku tych dwóch powyższych pętli nie wiemy ile razy zostaną wykonane - jest to uzależnione jedynie od warunku, który został przez Was określony.
    </p>




    <h3 class = "example">
        Przykład
    </h3>


     <code class=" hljs livecodeserver language-csharp">
Lotto = 6
do
{
Losowanie liczby lotto;
Lotto = lotto + 1;
} while (lotto < 7) lub (lott<=6) // w obu przypadkach pętla wykona się 6 razy

</code>




    <h3 class = "subtitle">
        I.5.3 Pętla for
    </h3>


    <p>
        Ta pętla charakteryzuje się tym, że możemy przy jej deklaracji ustalić, ile razy zostanie wykonana i najczęściej stosowana jest przy operacjach na
        tablicach takich jak wypełnianie tablic, wyświetlanie oraz dokonywanie operacji na tablicach.
    </p>


  <img src="http://media30.pl/wp-content/uploads/2015/12/For.png">




    <h3 class = "example">
        Przykład
    </h3>
 <code class=" hljs livecodeserver language-csharp">
Maszyna do losowanie liczb lotto tym razem przy wykorzystaniu pętli for
for( lotto=1; lotto<=6; lotto=lotto+1)
Losowanie liczby lotto.
</code>

<a href="/static/introduction"><b>Poprzedni rozdział</b></a>
 <a href="/static/chapter2"><b>Następny rozdział</b></a> 
</div>
